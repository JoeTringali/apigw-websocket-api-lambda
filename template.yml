AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: An Amazon API Gateway Websocket API and an AWS Lambda function.

# Global values that are applied to all applicable resources in this template
Globals:
  Function:
    CodeUri: ./src
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 15

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: "Application Configuration"
        Parameters:
          - AppName
      - Label:
          default: "Amazon DynamoDB Configuration"
        Parameters:
          - WebsocketConnectionsTableNameSuffix
          - ReadCapacityUnits
          - WriteCapacityUnits
    ParameterLabels:
      AppName:
        default: Application Name
      ReadCapacityUnits:
        default: Read Capacity Units
      WriteCapacityUnits:
        default: Write Capacity Units
      WebsocketConnectionsTableNameSuffix:
        default: Websocket Connections Table Name Suffix


Parameters:
  AppName:
    Type: String
    Default: apigw-http-api-lambda
    Description: >
      The name of the application
  WebsocketConnectionsTableNameSuffix:
    Type: String
    Default: 'websocket_connections'
    Description: >
      (Required) The suffix of the name of the Amazon DynamoDB table where connection identifiers 
      will be stored. The table name will be prefixed by the Stack Name.
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  ReadCapacityUnits:
    Description: Provisioned read throughput
    Type: Number
    Default: 5
    MinValue: 5
    MaxValue: 10000
    ConstraintDescription: must be between 5 and 10000
  WriteCapacityUnits:
    Description: Provisioned write throughput
    Type: Number
    Default: 5
    MinValue: 5
    MaxValue: 10000
    ConstraintDescription: must be between 5 and 10000


Resources:
  # API Gateway WebSocket API
  WebsocketApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Ref AppName
      Description: An Amazon API Gateway Websocket API and an AWS Lambda function.
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  # Lambda Function - uses Globals to define additional configuration values
  ConnectLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AppName}-connect-function'
      Handler: connect.handler
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref WebsocketConnectionsTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref WebsocketConnectionsTableName
  # Function permissions grant an AWS service or another account permission to use a function
  ConnectFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref ConnectLambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketApi}/*'
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambdaFunction.Arn}/invocations
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration
  # Lambda Function - uses Globals to define additional configuration values
  PostLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AppName}-post-function'
      Handler: post.handler
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref WebsocketConnectionsTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref WebsocketConnectionsTableName
  # Function permissions grant an AWS service or another account permission to use a function
  PostFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref PostLambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketApi}/*'
  PostIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Post Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostLambdaFunction.Arn}/invocations
  PostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: post
      AuthorizationType: NONE
      OperationName: PostRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref PostIntegration
  # Lambda Function - uses Globals to define additional configuration values
  DisconnectLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AppName}-disconnect-function'
      Handler: disconnect.handler
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref WebsocketConnectionsTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref WebsocketConnectionsTableName
  # Function permissions grant an AWS service or another account permission to use a function
  DisconnectFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref DisconnectLambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketApi}/*'
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectLambdaFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration
  WebsocketConnectionsTableName:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnits
        WriteCapacityUnits: !Ref WriteCapacityUnits
      TableName: 
        !Sub
          - ${AWS::StackName}-${TableNameSuffix}
          - { TableNameSuffix: !Ref WebsocketConnectionsTableNameSuffix }

Outputs:
  ConnectLambdaFunctionArn:
    Description: "Connect function ARN"
    Value: !GetAtt ConnectLambdaFunction.Arn
  DisconnectLambdaFunctionArn:
    Description: "Disconnect function ARN"
    Value: !GetAtt DisconnectLambdaFunction.Arn
  PostLambdaFunctionArn:
    Description: "Post function ARN"
    Value: !GetAtt PostLambdaFunction.Arn
  WebsocketApiEndpoint:
    Description: The default endpoint for the Websocket API.
    Value: !GetAtt WebsocketApi.ApiEndpoint
  WebsocketConnectionsTableNameArn:
    Description: "Websocket connections table ARN"
    Value: !GetAtt WebsocketConnectionsTableName.Arn
